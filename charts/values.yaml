image:
  repository: docker.io/mailhog/mailhog
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []

extraContainers:
  - name: stunnel
    image: dweomer/stunnel
    imagePullPolicy: IfNotPresent
    ports:
      - containerPort: 1026
        name: stunnel-smtp
        protocol: TCP
    volumeMounts:
      - name: stunnel-config
        mountPath: /etc/stunnel
      - name: smtp-tls
        mountPath: /etc/stunnel/certs
        readOnly: true
      - name: authdir
        mountPath: /authdir
        readOnly: true
    command: ["stunnel"]
    args: ["/etc/stunnel/stunnel.conf"]

nameOverride: ""
fullnameOverride: ""

containerPort:
  http:
    name: http
    port: 8025
  smtp:
    name: tcp-smtp
    port: 1025
  smtps:
    name: smtps
    port: 1026
    nodePort: 31442

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Image pull secrets that are attached to the ServiceAccount
  imagePullSecrets: []

automountServiceAccountToken: false

service:
  annotations: {}
  extraPorts: []
  clusterIP: ""
  externalIPs: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  type: ClusterIP
  # Named target ports are not supported by GCE health checks, so when deploying on GKE
  # and exposing it via GCE ingress, the health checks fail and the load balancer returns a 502.
  namedTargetPort: true
  port:
    http: 8025
    smtp: 1025
  nodePort:
    http: ""
    smtp: ""

securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  fsGroup: 1000

containerSecurityContext:
  readOnlyRootFilesystem: true
  privileged: false
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

certificate:
  commonName: smtp.ppcps-stable.test.sfera-t1.ru
  DNS: ["smtp.ppcps-stable.test.sfera-t1.ru"]
  secretName: smtp-tls

ingress:
  enabled: true
  # ingressClassName: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  hosts:
    - host: smtp.ppcps-stable.test.sfera-t1.ru
      paths:
        - path: "/"
          pathType: Prefix
          backend:
            service:
              name: smtp-mailhog
              port:
                name: http

  tls: #[]
    - secretName: smtp-tls
      hosts:
        - smtp.ppcps-stable.test.sfera-t1.ru

auth:
  enabled: true
  existingSecret: ""
  fileName: auth.txt
  fileContents: "test:$2a$04$qxRo.ftFoNep7ld/5jfKtuBTnGqff/fZVyj53mUC5sVf9dtDLAi/S"

# JSON file defining outgoing SMTP servers
outgoingSMTP:
  enabled: false
  existingSecret: ""
  fileName: outgoing-smtp.json
  fileContents: {}
    # See https://github.com/mailhog/MailHog/blob/master/docs/CONFIG.md#outgoing-smtp-configuration
    # Only name, host and port are required.
    #
    # server_name1:
    #   name: "server_name1"
    #   host: "mail.example.com"
    #   port: "25"    # NOTE: go requires this port number to be a string... otherwise the container won't start
    #   email: ""
    #   username: ""
    #  password: ""
    #  mechanism: "PLAIN|CRAM-MD5"
    # server_name2:
    #   name: "server_name2"
    #   host: "mail2.example.com"
    #   port: "587"   # NOTE: go requires this port number to be a string... otherwise the container won't start

podReplicas: 1

podAnnotations: {}

podLabels: {}

extraEnv: []

# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
livenessProbe:
  initialDelaySeconds: 10
  timeoutSeconds: 1

readinessProbe: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

affinity: {}

nodeSelector: {}

tolerations: []

priorityClassName:
